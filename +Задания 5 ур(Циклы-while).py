                    # 5. ЦИКЛЫ
                    # 5.1 (Пример)
# i = 0
# while i < 10:
#     print(i)
#     i = i + 1              # рез-тат выводится в столбец


                    # 5.2 (Пример)
# i = 0
# while i < 10:
#     print(i)                 # рез-тат выводится в столбец
#
#     if i == 5:
#         break
#
#     i += 1


                    # 5.3 (Пример)
# Условие:
# Необходимо вычислить сумму чисел от 1 до 50 и результат вывести на экран.

# i = 1
# result = 0                   # сумма
# while i <= 50:               # * можно указать while i < 51:
#     result += i
#     i += 1
# print(result)                # Print сработает только 1 раз, как цикл завершится!


                   # ЗАДАНИЕ 1 (5.4)
# Условие:
# Квадраты всех целых чисел от 1 до 10.

                    # 1 способ:
# i = 1
# result = 0
# while i < 11:                                    # либо м.б. указать while i <= 10:
#     result = i ** 2
#     i += 1                                       # i = i + 1
#     print(result)

                    # 2 способ:
# i = 1
# while i < 11:                                    # либо м.б. указать while i <= 10:
#     print(i ** 2)
#     i += 1                                       # i = i + 1


                    # ЗАДАНИЕ 2 (5.5)
# Условие:
# Перемножить все чётные значения в диапазоне от 0 до 125; результат вывести на экран.

# i = 1
# umnozenie = 0
# while i <= 125:
#     if i % 2 == 0:
#         umnozenie = i * i
#     i += 1
# print(umnozenie)


                    # ЗАДАНИЕ 3 (5.6)
# Условие:
# Вывести числа от 1 до 15 в порядке убывания.

                    # 1-ый способ:
# i = 15
# while i > 0:
#     print(i)                                 # 1 Табуляция (выведение всех кругов цикла)
#     i -= 1

                    # 2-ой способ:
# i = 15
# while i != 0:
#     print(i)                                 # 1 Табуляция (выведение всех кругов цикла)
#     i -= 1


                    # ЗАДАНИЕ 4 (5.7)
# Условие:
# Пользователь вводит 2 числа с клавиатуры, необходимо вывести на экран все отрицательные числа,
# лежащие между ними. Например, пользователь ввёл -5 и 3, на экране вывелось -4,-3,-2,-1

                     # 1 способ* (своё решение):
# a = int(input("Введите отрицательное число: "))         # переменная типа int 1
# b = int(input("Введите положительное число: "))         # переменная типа int 2
#                                                         # реш-ть, как поняли
# i = 0
# while i > a:
#     a += 1
#     if a == 0:
#         continue
#     print(a)
#
# while i <= b:
#     break
#     print(b)


                     # 2 способ:
# a = int(input("Введите отрицательное число: "))         # переменная типа int 1
# b = int(input("Введите положительное число: "))         # переменная типа int 2
#
# while a < b:                                            # усл. while a < b для полож.и отриц.
#     a += 1
#     if a == 0:
#         break
#     print(a)


                    # 5.8
# Пример условия else в цикле for:
                    # 5.8.1

# for i in range(3):
#     print(i)
# else:                                                   # else в циклах будет вып-ся, если не был вызван break
#     print("Готово")


# Цикл else можно исп-ть в кач-ве проверки срабатывания цикла break
                    # 5.8.2

# for i in range(3):
#     print(i)
#     if i == 1:
#         break
# else:
#     print("Готово")


                    # 5.8.3

# for i in range(3):
#     print(i)
#     if i == 5:
#         break                                        # break не сработает, т.к. 5 > заданного диапазона
# else:                                                # for - else: сработает полностью
#     print("Готово")


#                     # 5.8.4 (Пример использования continue в for - else)
# for i in range(3):
#     if i == 1:
#         continue                                    # при исп. continue - код читается дальше
#     print(i)
# else:
#     print("Готово")


                     # 5.9 (Пример)
                     # 5.9.1 (Пример условия else в цикле while)
# i = 0
# while i < 3:
#     print(i)
#     i += 1
# else:                                                 # else в циклах будет вып-ся, если не был вызван break
#     print("Готово")


                    # 5.9.2 (Пример с исп-ем break в конструкции while-else)
# i = 0
# while i < 3:
#     print(i)
#     i += 1
#     if i == 2:
#         print("Остановка while-else при i = 2")
#         break
# else:                                              # else в циклах будет вып-ся, если не был вызван break
#     print("Готово")


                     # ЗАДАНИЕ 5 (5.10)
# Условие:
# Необходимо, чтобы программа выводила на экран вот такую последовательность (не исп-ть готовый список):
# 7 14 21 28 35 42 49 56 63 70 77 84 91 98
# Добавить в список и найти его длину.

                    # 1 способ (своё решение)
# s = []
# i = 7
# while i > 0 and i < 100:
#     s.append(i)                                            # доб-е i (7) в список
#     i += 7
# print("Список: ", s)
# print("Длина списка (кол-во всех слов): ", len(s))


                    # 2 способ (с презентации)
# b = [ ]
# a = 0
# while a < 98:
#     a += 7          # на 1-ом круге к 0+7=7
#     b.append(a)     # 7 доб-ся в список
# print(b, "Длина списка (кол-во всех слов): ", len(b))


                    # 5.11 (Пример бесконечного цикла While True)

# total = 1
#
# while True:
#     x = int(input("Введите число: "))                     # переменная типа int
#
#     if x == 0:                                            # при вводе 0 - запустится break и программа завершится
#         break
#     total *= x
#
#     print(total)                                           # бесконечное *


                    # ЗАДАНИЕ 6 (5.12)
# Условие:
# Простейший калькулятор с введёнными 2-мя числами вещественного типа.
# Ввод с клавиатуры: операции +, -, *, /, //, % и два числа.
# Обработать ошибку: "Деление на ноль"
# Ноль использовать в кач-ве завершения программы (сделать как отд. операцию)

                    # 1 способ (своё решение)
# while True:
#     a = float(input("Введите первое число вещественного типа: "))                   # переменная типа float 1
#     b = float(input("Введите второе число вещественного типа: "))                   # переменная типа float 2
#     c = str(input("Введите арифметическую операцию (+, -, *, /, //, %, **): "))     # переменная типа string
#
#     if c == "+":
#         print(a + b)              # операция сложения (+)
#     elif c == "-":
#         print(a - b)              # операция вычитания (-)
#     elif c == "*":
#         print(a * b)              # операция умножения (*)
#     elif c == "//":
#         print(a // b)             # операция деления нацело (//)
#     elif c == "%":
#         print(a % b)              # операция остаток от деления (%)
#     elif c == "**":
#         print(a ** b)             # операция возведение в степень b числа a (**)
#     else:
#         if c == "/" and b > 0:    # операция деления (/)
#             print(a / b)
#         if b == 0:
#             print("ОШИБКА: На 0 делить нельзя!")     # Обработка ошибки: деление на ноль
#         if c == "0":
#             break


                    # 2 способ (из презентации)
# print("0, введённый как знак операции завершит работу программы")
#
# a = float(input("a = "))
# b = float(input("b = "))
# while True стоит после перем. a,b - консоль будет требовать повторного введения знака арифм. операции
# while True:
#     c = input("Введите знак арифетической операции (+,-,*,/): ")
#     if c == "0":
#         break
#     elif c == "+":
#         print(a + b)
#     elif c == "-":
#         print(a - b)
#     elif c == "*":
#         print(a * b)
#     elif c == "/":
#         if b != 0:
#             print(a / b)
#         else:
#             print("Деление на ноль!")

