                    # 6. КОЛЛЕКЦИИ
                    # 6.1 (Пример)
# Объявление списка:
# Вариант 1. Через литерал (выражение, создающее объект):

# a = [1, 3, "a", 6, "b"]
# print(a)

# Вариант 2. Через функцию list():
# пример с зан.

# b = list()
# print(b)

# * пример:
# r = list("1234567890")
# print(r)


                    # 6.2 (Пример)
# Объявим список c и заполним его 10 элементами от 0 до 100.

# import random
#
# c = [random.randint(0, 100) for i in range(10)]
# print(c)                                                      # отображение 10 случайных элементов
#
# print(c[0])     # 1-ый эл-т списка
# print(c[-1])    # посл. эл-т списка
# print(c[5])     # 6-ой эл-т списка
# print(c[-4])    # 4-ый эл-т с конца


                    # 6.3 (Пример/Добавление в список)
# пример 1 с зан.:
# a = []
#
# a.append("a")
# a.append(1)
# print(a)                                                     # в список доб-сь и пер. a, и 1.

# *пример 2:
# b = []
#
# b.append("Какой сегодня замечательный осенний день!")
# b.append(24)
# print(b)


                    # 6.4 (Пример/Добавление в список на указанную позицию)
# пример 1 с зан.:
# a = [1, 3, "a", 6, "b"]
# a.insert(1, 2)
# print(a)                                                      # в список после 1-ого эл-та (1) добавилась 2-ка.

# пример 2:
# b = [24, 11, 1993, "День"]
# b.insert(4,"рождения")
# print(b)


                    # 6.5 (Пример/Изменение элементов списка)
# пример 1 с зан.:
# a = [1, 3, "a", 6, "b"]
# a[1] = 2
# print(a)                                                    # 3-ка (под 1-ым индексом) сменилась на 2

# *пример 2:
# b = [2, 4, "ноября", 1993, "день"]
# b[4] = "День рождения!"
# print(b)


                    # 6.6 (Пример/Удаление элемента из списка)
# Удаление эл-та из списка при помощи DEL:
# пример 1 с зан.:
# a = [1, 3, "a", 6, "b"]
# del a[1]     # удаление 3-ки под индексом 1 из списка.
# print(a)

# *пример 2:
# b = [0, 1, "января", "отмечают", "Новый год"]
# del b[0]
# print(b)

# Удаление эл-та из списка при помощи REMOVE:
# пример 1 с зан.:
# a = [1, 3, "a", 6, "a", "b"]
# a.remove("a")                                     # из списка удалится только 1-ая "a".
# print(a)

# *пример 2:
# a = [1, 3, "a", 6, "a", "b"]
# a.remove("a")                                      # из списка удалятся и 1-ая, и 2-ая "a".
# a.remove("a")
# print(a)

# *пример 3:
# b = [0, 4, "октября", "-", "состоится", 'экзамен по "Пайтону"']
# b.remove("состоится")
# print(b)


                    # 6.7 (Пример)
                    # 6.7.1. Удалять можно как из текущего списка, так и из вложенных списков.

# пример с зан. 1:
# d = ['hello', 'world']
# b = [1, 3, d, 6, "a", 'b']
#
# del b[2][1]                            # из влож. списка d удалился эл-т c 1-ым индексом 'world'
# print(b)

# *пример 2:
# a = ['Иванов', 'Иван', 'Иванович']
# b = [2, 4, a, 6, "восемь", 'nine']
#
# del b[2][0]                            # из влож. списка d удалился эл-т c 1-ым индексом 'world'
# print(b)

                    # 6.7.2. Удалять можно целыми диапазонами:
# пример 3 с зан.:
#
# a = [1, 3, 6, 'a', 'b', 'abc', 123, 435]
#
# del a[4:]                                 # удаляем все эл-ты после 4-ого эл-та (включительно)
# print(a)
# del a[:2]                                 # удаляем все эл-ты до 2-ого эл-та
# print(a)
# del a[1:3]                                # удаляем от 1-ого эл-та до 3-го эл-та
# print(a)

# k = [1, 2, 3, 'четыре', 'пять', 'шесть', 7, 8]
#
# del k[4:]                                            # удаляем все эл-ты после 4-ого эл-та (включительно)
# print(k)
# del k[:2]                                            # удаляем все эл-ты до 2-ого эл-та (2-ой эл-т не уд-ся)
# print(k)
# del k[1:3]                                           # удаляем от 1-ого эл-та до 3-го эл-та
# print(k)

                    # 6.8 (Пример/проверка наличия элемента в списке)
# пример 1 с зан.:
# a =[1, 3, 6, 'a', 'b', 'abc', 123, 435]
#
# if 'abc' in a:
#     print('Yes.')

# *пример 2:
# a =[1, 2, 3, 'четыре', 'пять', 'шесть', 7, 8]
#
# if 'шесть' in a:
#     print('Yes.')


                    # 6.9 (Пример/Объединение списков)
                    # 6.9.1. Объединение списков с помощью оператора:
# пример 1 с зан.:
# a = [1, 3, 5]
# b =[1, 5, 8, 9]
# print(a + b)

# *пример 2:
# a = [1, 2, 3, 4, 5]
# b =['шесть', 'семь', 'восемь', 'девять', 'десять']
# print(a + b)

                     # 6.9.2. Объединение списков с помощью метода extend:
# пример 3 с зан.:
# d = ['h','e','l','l','o']
# e = ['w','o','r','l','d']
#
# d.extend(e)                                              # extend не возвращает новый список, а доп-ет текущий
# print(d)

# *пример 4:
# a = ['s','u','m','m','e', 'r']
# b = ['t','i','m','e']
#
# a.extend(b)                                              # extend не возвращает новый список, а доп-ет текущий
# print(a)


                    # 6.10 (Пример/Копирование списка в Python)
# пример 1 с зан.:
# a = [1, 2, 3, 4]
# b = a                                                   # переменной b присваивается не значение списка a, а его адрес
#
# a.append(5)
# b.append(6)
# print('a', a, 'b', b)

# *пример 2:
# a = [5, 6, 7, 8]
# b = a                                                # переменной b присваивается не значение списка a, а его адрес
#
# a.append("Девять")
# b.append(10)
# print('a', a, 'b', b)


                    # 6.11 (Пример/Цикл по списку)
                    # 6.11.1. С использованием цикла for:
# пример 1 с зан.:
# a = [1, 2, 3, 'meow']
# for i in a:
#     print(a)                                          # рез-тат вывелся 4 раза, т.к. 4 эл-та в списке

# *пример 2:
# a = [1, 2, 3, 4, 5, 'milk']
# for i in a:
#     print(a)                                         # рез-тат вывелся 6 раз, т.к. 6 эл-тjd в списке

                    # 6.11.2. С использованием цикла while:
# пример 3 с зан.:
# a = [1, 2, 3, 'meow']
# a_len = len(a)
# i = 0
# while i < a_len:
#     print(a[i])
#     i += 1

# *пример 4:
# a = [4, 5, 6, 7, 8, 'девять']
# a_len = len(a)
# i = 0
# while i < a_len:
#     print(a[i])                              # рез-тат будет выведен в столбик
#     i += 1


                    # 6.12 (Методы списков)
                    # 6.12.1. Clear:

# a = [1, 2, 3]
# a.clear()                                           # предназн. для удаления всех эл-тов(список становится пустым)
# print(a)                                            # рез-тат - []

                    # 6.12.2. Copy:
# a = [1, 2, 3]
# b = a.copy()                                         # служит для копирования списков
# print(id(a), id(b), a, b)

                    # 6.12.3. Count:
# a = ['one', 'two', 'three', 'one', 'two', 'one']
# print(a.count('one'))                                      # посчитает кол-во эл-тов x в списке

                    # 6.12.4. Index:
# пример 1 с зан.:
# a = ['one', 'two', 'three', 'one', 'two', 'one']
# print(a.index('three'))                                    # вернёт позицию первого найденного эл-та x в списке

# *пример 2:
# b = ["Окно", 'Солнце', 'Рама', 'Дверь', 'Окно', 'Рама']
# print(b.index('Рама'))                                         # вернёт позицию первого найденного эл-та x в списке

                    # 6.12.5. Pop (pop-возвращает удаленный эл-т списка):
# пример 1 с зан.:
# a = [1, 'meow', 3, 'meow']
# a.pop(1)                                                       # удал-ет эл-т с индексом 1 'meow'
# print(a)

# *пример 2:
# b = [1, 'два', 3, 'четыре', 5, 6]
# b.pop(3)                                                        # удал-ет эл-т с индексом 3 'четыре'
# print(b)

                    # 6.12.6. Pop:
# пример 3 с зан.:
# a = [1, 'два', 3, 'четыре']
# a.pop()                                                            # удал-ет первый эл-т списка
# print(a)

# пример 4 с зан.:
# a = [20, 'тридцать', 40, 'пятьдесят', 60, "семьдесят"]
# a.pop(-1)                                                          # удал-ет последний эл-т списка
# print(a)


                    # 6.12.7. Reverse:
# a =[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# a.reverse()                                                       # меняет порядок эл-тов в списке на противоположный
# print(a)

                    # 6.12.8. Sort (по возрастанию):
# a =[6, 77, 2, 6, 78, 6, 2]
# a.sort()                                                           # сортировка списка по возрастанию
# print(a)

                    # 6.12.9. Sort (по убыванию):
# b =[6, 77, 2, 6, 78, 6, 2]
# b.sort(reverse=True)                                               # сортировка списка по убыванию
# print(b)


                      # 6.13 (Пример/Вложенные списки)
                    # 6.13.1. Список может содержать списки:

# elements = [1, 3, 4, [5, 7, 8], 'abc', 4]
# print(elements)

                    # 6.13.2. Обращение к элементу вложенного списка:

# a = [['апельсин', 57], ['абрикос', 58], ['киви', 70], ['банан', 90]]
# print(a[0])
#
# print(a[1][0])              # обращ-е к эл-ту влож. списка: 1ый инд-инд. гл. списка, 2-ой - инд. эл-та во влож. списке


                    # 6.14 (Пример/Срез из списка)

# a = [1.1, 2.2, 3, 4, 5, 6, 7.7, 8.8]
# int_a = a[2:6]                            # со 2-ого эл-та (вкл-но) по 6-ой эл-т
# print(id(a), id(int_a))                   # a и int_a - разные списки
# print(a)                                  # срез не модифицирует исходн. список
# print(int_a)


                    # ЗАДАНИЕ 1 (6.15)
# Условие:
# Дан произвольный список. Представьте его в обратном порядке.

# *способ 1:
# a = [2, 4 , 6, 8, 10, 12, 'десять', 'восемь', 'шесть', 'четыре', 'два']
# a.reverse()
# print(a)

# способ 2:
# a = [2, 4 , 6, 8, 10, 12, 'десять', 'восемь', 'шесть', 'четыре', 'два']
# print(a[::-1])


                    # ЗАДАНИЕ 2 (6.16)
# Условие:
# Дан список некоторых целых чисел, найдите значение 20 в нём и, если оно присутствует, замените его на 200.
# Обновите список только при первом вхождении числа 20.

# a = [1, 20, 3, 20, 13, 5, 6, 9, 11, 20, 88, 35, 23, 1]
# print("Исходный список: ", a)
#
# b = a.index(20)                                                # index - находит 1-ый входящий эл-т (первое вхождение)
# a[b] = 200
# print("Изменённый список: ", a)                                # замена 1-ой 20 на 200.


                    # ЗАДАНИЕ 3 (6.17)
# Условие:
# Список из 7 цифр. Если чётных цифр в нём больше, чем нечётных, то
# найти сумму всех его цифр, если нечётных больше, то найти
# произведение 1, 3 и 6 элемента.

                    # 1 вариант:
#Поиск суммы всех цифр (чётных > нечётных)
# a = [2, 4, 3, 9, 10, 1, 8]           # cписок
# chetn = 0                            # чётные
# nechetn = 0                          # нечётные
#
# for i in a:                         # i проходится по списку a
#     if i % 2 == 0:
#         chetn = chetn + 1
#     else:
#         nechetn = nechetn + 1
# print("Количество чётных цифр в списке a:", chetn)
# print("Количество нечётных цифр в списке а: ", nechetn)
#
# S = 0         # сумма
# P = 1         # произведение
# if chetn > nechetn:
#     for i in a:
#         S = S + i
#     print("Сумма всех чисел списка:", S)
# else:
#     for i in a:
#         P = a[0] * a[2] * a[5]
#     print("Произведение 1,3 и 6 элементов списка: ", P)


                    # 2-ой вариант
# Поиск произведения 1, 3 и 6 элементов (чётных < нечётных)
# a = [1, 2, 3, 4, 5, 6, 7]            # cписок
# chetn = 0                            # чётные
# nechetn = 0                          # нечётные
#
# for i in a:                         # i проходится по списку a
#     if i % 2 == 0:
#         chetn = chetn + 1           # chetn += 1
#     else:
#         nechetn = nechetn + 1
# print("Количество чётных цифр в списке a:", chetn)
# print("Количество нечётных цифр в списке а: ", nechetn)
#
# S = 0         # сумма
# P = 1         # произведение
# if chetn > nechetn:
#     for i in a:
#         S = S + i                  # S += i
#     print("Сумма всех чисел списка:", S)
# else:
#     for i in a:
#         P = a[0] * a[2] * a[5]
#     print("Произведение 1,3 и 6 элементов списка: ", P)

                    # 3-ий вариант (из презентации)
# mas = [1, 3, 4, 5, 6, 7, 8]
# count = 0
# count_2 = 0
# for i in mas:
#     if i % 2 == 0:
#         count += 1
#     else:
#         count_2 += 1
# print("Чётных: ", count, "Нечётных: ", count_2)
#
# sum = 0
# pr = 1
# if count > count_2:
#     for i in mas:
#         sum += i
#     print("Сумма: ", sum)
# else:
#     pr = mas[0] * mas[2] * mas[5]
#     print("Произведение:", pr)


                    # ЗАДАНИЕ 4 (6.18)
# Условие:
# Найдите совпадающие элементы 2-ух списков.
# a = [5,[1,2],2,'r',4,'ee']
# b = [4,'we','ee',3,[1,2]]
# Эти значения записать в новый список.

# a = [5,[1,2],2,'r',4,'ee']
# b = [4,'we','ee',3,[1,2]]
# c = []                             # совпадающие элементы: [1,2],4,'ee'
#
# for i in a:
#     if i in b:
#         c.append(i)
# print(c)


                    # ЗАДАНИЕ 5 (6.19)
# Условие:
# Даны 2 списка:
# a =[4,6,'ру','tell',78]
# b = [44,'hello',56,'exept',3]

# Выполнить следующие операции:
# 1. Сложить 2 списка.
# 2. Добавьте элемент 6 на 3 позицию.
# 3. Удалите все текстовые переменные
# 4. Посчитайте количество элементов списка.

                     # 6.19.1 - 1 способ*:
# a = [4, 6,'ру','tell', 78]
# b = [44,'hello', 56,'exept', 3]
# print("Исходный список a:", a)
# print("Исходный список b:", b)


# 1 способ (пункт 1):
# print("Сложение списков a и b:", a + b)                         # 1 (с помощью оператора +)

# 2 способ (пункт 1):
# a.extend(b)                                                     # 1 (с помощью м-да extend)
# print("Сложение списков a и b:", a)
#
# a.insert(2,6)                                                   # 2 (в совмещённые списки)
# print("Добавление элемента 6 на 3-ю позицию:", a)
#
# del a[3]
# print("Удаление 'ру':", a)                                       # 3
# del a[3]
# print("Удаление 'tell':", a)
# del a[5]
# print("Удаление 'hello':", a)
# del a[6]
# print("Удаление 'exept':", a)
#
# a1 = len(a)                                                      # 4
# print("Количество элементов списка:", a1)


                    # 6.19.2 - 2 способ (из презентации):
# a = [4, 6,'ру','tell', 78]
# b = [44,'hello', 56,'exept', 3]
#
# a.extend(b)
# a.insert(3,6)      # ?
# print(a)
#
# for i in a:
#     if type(i) is str:
#         a.remove(i)         # remove- видоизм. цикл, в результате чего образуется логическая ошибка
# a.sort()           # ?
# print(a)


# 3 способ:
# a = [4, 6,'ру','tell', 78]
# b = [44,'hello', 56,'exept', 3]
# c = []
#
# print("Исходный список a:", a)
# print("Исходный список b:", b)
#
# a.extend(b)                                                     # 1 (с помощью м-да extend)
# print("Сложение списков a и b:", a)
#
# a.insert(2,6)                                                   # 2 (в совмещённые списки)
# print("Добавление элемента 6 на 3-ю позицию:", a)
#
# for i in a:                                                     # 3
#     if type(i) is int:
#         c.append(i)
# print("Переменные типа int: ", c)
#
# a1 = len(a)                                                      # 4
# print("Количество элементов списка:", a1)

