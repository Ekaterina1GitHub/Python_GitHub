                    # 11. МНОЖЕСТВА
                    # 11.1. (Пример / Создание множеств с помощью фигурных скобок {})
# a = {1, 2, 3, 4, 5, 6}
# print(a)


                    # 11.2. (Пример / Создание множеств из строк)
# b = {'Hola', 'Que tal estas?', 'Muchas gracias', 'Hasta manana'}
# print(b)                                                 # элементы множества будут находиться в произвольном порядке


                    # 11.3. (Пример / Создание множества с элементами разных типов)
# a = {1.00, "Ekaterina", (24, 11, 1993)}
# print(a)


                    # 11.4. (Пример / Создание множества из списков через встроенную ф-ию set())
# b = set([1, 2, 3, 4, 5, 6])
# print(b)


                    # 11.5. (Пример)
# Создание множества из списков через встр. ф-ию set() / Список содержит дубликаты)
# c = set([1, 2, 3, 1, 2])                                   # вывделено коричневым цветом - не ошибка!
# print(c)                                                   # множество удалило дубликаты и выдало по 1 экз-ру эл-тов
# Создание множеств с помощью фигурных скобок {} / Множество содержит дубликаты)
# d = {1, 2, 3, 1, 2}
# print(d)                                                  # множество удалило дубликаты и выдало по 1 экз-ру эл-тов


                    # 11.6. (Пример / Создание множеств)
# 11.6.1.
# x = {}
# print(type(x))                          # тип данных 'dict' - словарь, а не множество
# 11.6.2
# y = {1, 2, 3, 4, 5, 6, 7, 8, 10}
# print(type(y))                          # тип данных 'set'


                    # 11.7. (Пример / Создание множеств c помощью ф-ии set())
# x = set()
# print(type(x))


                    # 11.8. (Пример / Доступ к элементам множеств)
# months = set(["Jan", "Feb", "March", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", " Nov", "Dec"])
#
# for m in months:
#     print(m)                                                               # рез-тат в столбик в произвольном порядке


                    # 11.9. (Пример / Проверка наличия эл-та во множестве при помощи in)
# months = set(["Jan", "Feb", "March", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", " Nov", "Dec"])
#
# print("May" in months)                                           # результат True, т.к. он был найден во множестве
# print("Cat" in months)                                           # результат False, т.к. он  не был найден во множестве


                    # 11.10. (Пример / Добавление элементов во множество)
                    # 11.10.1. При помощи ф-ии add().
# months = set(["Jan", "March", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", " Nov", "Dec"])
#
# months.add("Feb")
# print(months)

                    # 11.11. (Пример / Удаление элемента из множеств)
                    # 11.11.1. Метод discard() / Удаление элемента из множеств:
# a = {1, 2, 3, 4, 5, 6}
# a.discard(3)
# print(a)                                                       # удалится число 3

                    # 11.11.2. Пример / Метод discard()/ Проверка: Удаление элемента, которого нет:
# a = {1, 2, 3, 4, 5, 6}
# a.discard(11)
# print(a)                                                       # не будет выдавать ошибку


                    # 11.11.3. Пример / Метод remove() / Удаление элемента из множеств:
# b = {1, 2, 3, 4, 5, 6}
# b.remove(3)
# print(b)                                                       # удалится число 3


                    # 11.11.4. Пример / Метод remove()/ Проверка: Удаление элемента, которого нет:
# b = {1, 2, 3, 4, 5, 6}
# b.remove(11)
# print(b)                                                      # выдаст ошибку: b.remove(11)   KeyError: 11


                    # 11.11.5. Пример / Метод pop() / Удаление элемента из множеств:
# b = {1, 2, 3, 4, 5, 6}
# b.pop()
# print(b)

                    # 11.11.6. Пример / Метод clear() / Удаление элемента из множеств:
# c = {1, 2, 3, 4, 5, 6}
# c.clear()
# print(c)                                   # результат: set()

                    # 11.12 Пример / Объединение множеств:
                    # 11.12.1. Объединение множеств при помощи ф-ии union():
# months_a = set(["Jan", "Feb", "March", "Apr", "May", "June"])
# months_b = set(["July", "Aug", "Sep", "Oct", "Nov", "Dec"])
#
# all_months = months_a.union(months_b)
# print(all_months)

                    # 11.12.2. Пример / Объединение множеств при помощи ф-ии union():
# a = set(['1', '2', '3', '4', '5', '6'])
# b = set([7, 8, 9, 10, 11, 12])
#
# c = a.union(b)                                # числа складываются в том порядке, в котором были внесены во множество
# print(c)

                    # 11.12.3. Пример / Объединение множеств:
# числовое множество:
# x = {1, 2, 3}                                                # 1 из 2 эл-тов дубликатов не будет отображаться
# y = {4, 3, 6}
# z = {7, 4, 9}
#
# a = x.union(y, z)
# print(a)                                                    # 3 (из y) и 4 (из z) не будут выведены
# строковое множество:
# k = {'один', 'два', 'три'}                                  # 1 из 2 эл-тов дубликатов не будет отображаться
# l = {'четыре', 'три', 'шесть'}
# h = {'семь', 'четыре', 'девять'}
#
# c = k.union(l, h)
# print(c)                                                    # 'три' (из y) и 'четыре' (из z) не будут выведены


                    # 11.12.4. Пример / Объединение двух множеств  с помощью оператора |:
# months_a = set(["Jan", "Feb", "March", "Apr", "May", "June"])
# months_b = set(["July", "Aug", "Sep", "Oct", "Nov", "Dec"])
#
# print(months_a | months_b)


                    # 11.12.5. Пример / Объединение из более 2-ух множеств с помощью оператора |:
# x = {1, 2, 3}                                                # 1 из 2 эл-тов дубликатов не будет отображаться
# y = {4, 3, 6}
# z = {7, 4, 9}
#
#
# print(x | y | z)


                    # 11.13 Пример / Пересечение (поиск повторяющихся эл-тов во множествах) множеств:
# 11.13.1. с помощью оператора &:
# x = {1, 2, 3}
# y = {4, 3, 6}
#
# print(x & y)         # результат: {3}


                    # 11.14 Пример / Разница между множествами:
# 11.14.1
# A = {1, 2, 3}
# B = {4, 3, 6}
#
# print(A-B)          # результат: 1, 2
# print(B-A)          # результат: 4, 6

# 11.14.2
# A = {24, 48, 31, 11, 3, 19}
# B = {40, 63, 6, 48, 24, 55}
#
# print(A-B)          # результат: 19, 11, 3, 31
# print(B-A)          # результат: 40, 63, 6, 55


                    # 11.15 Пример / Методы множеств:
                    # 11.15.1 Пример / Метод copy():
# a = {"Nicholas", "Michelle", "John", "Mercy"}
# b = a.copy()                                              # м-д возвращает копию множества
# print(b)

                    # 11.15.2 Пример / Метод isdisjoint():
# a = {'Nicholas', 'Michelle', 'John', 'Mercy'}
# b = {'Jeff', 'Bosco', 'Teddy', 'Milly'}
#
# c = a.isdisjoint(b)                                      # проверяет: явл-ся ли множество пересечением или нет
# print(c)

                    # 11.15.3 Пример / Метод len():
# a = {'Nicholas', 'Michelle', 'John', 'Mercy'}   # м-д возвращ длину множ-ва, кот. явл-ся общим кол-вом эл-тов во множ-ве
# print(len(a))                                   # результат 4


                    # 11.16 Пример / frozenset:
# a = frozenset([1, 2, 3, -10, 40])
# print(type(a))


                    # ЗАДАЧА 1 (11.17)
# Условие:
# Проверить, есть ли в числовой последовательности списка дубликаты

# 1 способ (Когда дубликаты есть):
# a = [1, 2, 3, 4, 5, 20, 40, 60, 80, 3, 1, 80]      # cписок / т.данных list
# a1 = len(a)                                        # длина списка = 12 элементов
#
# b = set(a)                                         # list (список) перевели в set (множество)
# b1 = len(b)                                        # длина множества (множ-ва не содержат дубликатов) = 9
#
# print(a1 == b1)

# 2 способ (Когда дубликатов нету):
# a = [100, 200, 300, 'четыреста', 'пятьсот']
# print("Список: ", a, type(a))
# b = set(a)
# print("Множество: ", b, type(b))
# print(len(a) == len(b))


                    # ЗАДАЧА 2 (11.18)
# Условие:
# 1. Создать произвольный словарь.
# 2. Добавить новый элемент с ключом типа str и значением типа int
# 3. Добавить новый элемент с ключом типа кортеж (tuple)  и значением типа список (list)
# 4. Получить элемент по ключу
# 5. Удалить элемент по ключу
# 6. Получить список ключей словаря

# 1 способ*:
# a = {'ключ 1': 'значение 1', 'ключ 2': 'значение 2', 'ключ 3': 'значение 3', 'ключ 4': 'значение 4'}        # 1
# a['строка'] = 5                                                                                             # 2
# print(a)
#
# a[(1, 2, 3, 4, 5, tuple)] = [1, 2, 3, 'четыре']                                                             # 3
# print(a)
#
# print(a['ключ 3'])                                                                                          # 4
#
# del a['ключ 1']                                                                                             # 5
# print(a)
#
# keys_1 = a.keys()                                                                                          # 6
# print(keys_1, '\n')

# 2 способ(из презентации):
# 1. создаём словарь

# d = {1: 'value_1', 2: 'value_2', 3: 'value_3'}

# 2. добавляем в словарь новый элемент с ключом 'str_key' и значением
# d['str_key'] = 12345
# print(d)

# 3. добавляем в словарь новый элемент с ключом ('it','is','tuple') и значением [11, 22, 'list_value', 33, {1, 2, 3}]
# d[('it', 'is', 'tuple')] = [11, 22, 'list_value', 33, {1, 2, 3}]
# print(d)

# 4. получаем  элемент словаря по ключу 'str_key'
# cпособ: напрямую - в случае отсутствия ключа формируется исключение
# item_by_key_v1 = d['str_key']
# print(item_by_key_v1)
# способ 2: через ф-ию get() - в случае отсутствия ключа возвращается дефолтное значение 'No item'
# item_by_key_v2 = d.get('str_key', 'No item')
# print(item_by_key_v2)

# 5. удаляем элемент с ключом '2' из словаря
# item_deleted = d.pop(2, 'No item')
# print(item_deleted)
# print(d)

# 6. получаем ключи словаря
# keys = d.keys()
# print(keys)


                    # ЗАДАЧА 3 (11.19)
# Условие:
# 1. Создать множество.
# 2. Создать неизменяемое множество.
# 3. Выполнить операцию объединения созданных множеств.
# 4. Выполнить операцию пересечения созданных множеств.

# a = {1, 2, 3, 'четыре', 'пять', 'шесть'}                      # 1 (изменяемое множество)
# print(a)
#
# b = frozenset({7, 8, 9, 'десять', 'пять', 'шесть'})           # 2 (неизменяемое множество)
# print(b)

# print(a | b)                                                  # 3 (объединение множеств)

# 1 способ:
# print(a & b)                                                  # 4.1. (пересечение множеств)
# 2 способ:
# print(a.intersection(b))                                      # 4.2 (пересечение множеств)
