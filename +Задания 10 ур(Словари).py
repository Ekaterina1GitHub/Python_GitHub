                     # 10. СЛОВАРИ
                     # 10.1 (Пример / Создание словарей)
# 10.1.1. Создание словарей с помощью литерала:
# d = {}
# d = {'dict': 1, 'dictionary': 2}
# print(d)

# 10.1.2. Создание словарей с помощью ф-ии dict:
# d = dict(short='dict', long='dictionary')                       # !Ключи пишутся без кавычек в данном способе!
# d_2 = dict([(1,1), (2, 4)])
# print(d, '\n', d_2)                                             # '\n' - перенос строки.

# 10.1.3. Создание словарей с помощью метода fromkeys:
# d = dict.fromkeys(['a','b'])
# d_2 = dict.fromkeys(['a', 'b'], 100)                              # Вместо {} будем ставить () и [] скобки.
# print(d, '\n', d_2)

# 10.1.4. Создание словарей с помощью генератора словарей:
# d = {a: a ** 2 for a in range(7)}
# print(d)


                     # 10.2 (Пример / Доступ к значению с помощью операции [], если известен ключ)
# Пример 1:
# d = {1: 2, 2: 4, 3: 9}
# d[4] = 4 ** 2
#
# print(d[1])
# print(d)


# Пример 2 (Смена значения ключа / Добавление ключа в словарь ):
# d = {1: 2, 2: 4, 3: 9}
# d[4] = 4 ** 2       # добавление ключа
# s = d[1]=5          # смена значения (2) первого ключа на 5
# print(s)
# print(d)           # добавится ключ 4: значение 16


# Пример 3 (Изменение значения ключа в словаре):
# d = {1: 2, 2: 4, 3: 9}
# d[3] = 4 ** 2       # изменение значения ключа 3 с 9 на 16.
# print(d)

# Пример 4:
# d = {1: 50, 2: 100, 3: 150, 4: 200, 5: 250}
# d[8] = 300 * 2                      # доб-е ключа 8 со значением 600
# d[7] = 1000 / 2                     # доб-е ключа 7 со значением 500
# d[6] = 200 + 200                    # доб-е ключа 6 со значением 400
#
# e = d[5]=300
#
# print(d)
# print(e)


                     # 10.3 (Методы словарей)
                     # 10.3.1 Clear
# d = {'Яблоки': 50, 'Киви': 75, 'Ананасы': 60, 'Бананы': 80}
# d.clear()                                                       # очищает словарь
# print(d)                                                        # результат - {}

                    # 10.3.2 Copy
# d = {'Яблоки': 50, 'Киви': 75, 'Ананасы': 60, 'Бананы': 80}
# e = d.copy()                                                      # возвращает копию словаря
# print(id(d), id(e), d, e)

                    # 10.3.3 Items
# Пример 1*:
# d = {'Яблоки': 50, 'Киви': 75, 'Ананасы': 60, 'Бананы': 80}
# e = d.items()                                                    # возвращает пары (ключ, значение)
# print(e)                                                         # результат - список

# Пример 2:
# d = {'Яблоки': 50, 'Киви': 75, 'Ананасы': 60, 'Бананы': 80}
# e = d.items()                                                     # возвращает пары (ключ, значение)
# d['Груши'] = 100
# d['Виноград'] = 55
# print(e)

                     # 10.3.4 Keys
# d = {1: 2, 2: 4, 3: 9}
# r = d.keys()                                  # возвращает ключи в словаре
# print(r)                                      # выводятся ключи: 1,2,3

                     # 10.3.5 Values
# d = {1: 2, 2: 4, 3: 9}
# f = d.values()                                # возвращает значения в словаре
# print(f)                                      # выводятся значения: 2, 4, 9

                     # 10.3.6 Len
# d = {1: 2, 2: 4, 3: 9}
# print(len(d))                                   # определяет количество элементов в списке


                    # 10.4 (Пример / Метод Len)
# Months = {1: 'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'Jun',
#           7: 'Jul', 8:'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}
# count =len(Months)
# print(count)


                    # 10.5 (Пример / Удаление элемента из словаря - операция dell)
# Операция del - удаление элемента из словаря

# Исходный словарь
# Salary = {'Director': 120800.0, 'Secretary': 101150.25, 'Locksmith': 188200.00}
# print(Salary)
# Удалить элемент по ключу 'Secretary'
# del Salary['Secretary']
# print(Salary)                                                        # удалились и ключ, и значение

# Попытка удалить несуществующий ключ
# del Salary[5]  # нельзя, генерируется исключение KeyError: 5
# del Salary['None'] # тоже запрещено


                    # 10.6 (Пример / Метод Len)
# Position = {'Manager': {'Director',                               # !!! 1 ключ имеет несколько значений!!!
#                         'Deputy Director'},
#             'Teacher': {'Specialist',
#                         'Methodist',
#                         'Senior Lecturer'},
#             'Staff': {'Cleaner',
#                       'Porter',
#                       'Watchman'}}
# count1 = len(Position)                      # длинна словаря - выводит кол-во пар (ключ; значение)
# count2 = len(Position['Manager'])           # длинна конкретного ключа  - выводит кол-во значений при влож. типе данных
# count3 = len(Position['Staff'])
#
# print(Position, 'len: ', count1, '\n',
#       Position['Manager'], 'len:', count2, '\n',
#       Position['Staff'], 'len:', count3, '\n')


                     # 10.7 (Пример / Операция in)
# Операция in - определение наличия ключа в словаре
# Исходный словарь
# Salary = {'Director': 120800.0,
#           'Secretary': 101150.25,
#           'Locksmith': 188200.00}
# print(Salary)

# Удалить элемент по ключу 'Secretary' с проверкой
# key ='Secretary'
# if key in Salary:
#     del Salary['Secretary']
#     print(Salary)

# Попытка удалить несуществующий ключ
# если ключа нету, то исключение KeyError не генерируется
# key2 = 5
# if key2 in Salary:
#     del Salary[key2]


                     # 10.8 (Пример / Определение отсутствия ключа в словаре)
# Операция not in - определение отсутствия ключа в словаре
# Формирование словаря слов с их числовым эквивалентом

# 1. Сформировать пустой словарь
# Words = dict()    # Words = {}

# 2. Вывести кол-во слов в словаре
# count = int(input("Количество слов в словаре: "))

# 3. Цикл добавления слов
# i = 0
# while i < count:
#     print("Ввод слов: ")
#     wrd = str(input("Слово: "))
#     value = int(input("Значение: "))

    # Если ключа wrd нет в словаре, то добавить пару [wrd:value]
    # if wrd not in Words:
    #     Words[wrd] = value
    # i = i + 1
# Вывести сформированный словарь
# print(Words)


                     # 10.9 (Пример / Встроенная ф-ия zip)
# Словари. Функция zip() - позволяет создать словарь путём объединения списков ключей и значений.

# 10.9.1 (Пример)
# Создание словаря из списков ключей и значений
# Numbers = dict(zip([1, 2, 3], ['One', 'Two', 'Three']))
# print(Numbers)

# 10.9.2 (Пример / Проверка : ключей > значений, с использованием списка)
# Создание словаря из списков ключей и значений
# Numbers = dict(zip([1, 2, 3, 4, 5, 6], ['One', 'Two', 'Three']))
# print(Numbers)                                            # Выводятся ключи 1-3 и значения 'one' - 'three'

# 10.9.3 (Пример / Проверка : ключей < значений, с использованием списка)
# Создание словаря из списков ключей и значений
# Numbers = dict(zip([1, 2, 3], ['One', 'Two', 'Three', 'Четыре', 'Пять']))
# print(Numbers)                                              # Выводятся ключи 1-3 и значения 'one' - 'three'


# 10.9.4 (Пример / Проверка : ключей < значений, c использованием кортежа)
# Numbers = dict(zip((1, 2, 3), ('One', 'Two', 'Three', 'Четыре', 'Пять')))
# print(Numbers)


                     # 10.10 (Пример / Обход словаря с помощью цикла for)
# Работа со словарями
# Обход словаря с помощью цикла for

# Исходный словарь
# Months = {1: 'Jan', 2: 'Feb', 3: 'Mar',
#           4: 'Apr', 5: 'May', 6: 'Jun',
#           7: 'Jul', 8: 'Aug', 9: 'Sep',
#           10: 'Oct', 11: 'Nov', 12: 'Dec'}

# Цикл for обхода словаря
# в цикле mn - ключ, Months[mn] - значение

# for mn in Months:
#     print(mn,': ', Months[mn])


                     # ЗАДАНИЕ 1 (10.11)
# Условие:
# Создайте словарь person, в котором будут присутствовать ключи name, age, city.
# Выведите значение возраста из словаря person.

# 1 способ (при помощи литерала):
# person = {'name': 'Екатерина', 'age': 28, 'city': 'Гомель'}
#
# print(person['age'])

# 2 способ (при помощи функции dict):
# person = dict(name = 'Екатерина', age = 28, city = 'Гомель')
# print(person['age'])

                     # ЗАДАНИЕ 2 (10.12)
# Условие:
# Значениями словаря м.б. и списки.
# Создайте словарь с ключами BMW, Tesla и списками из 3-ёх моделей в качестве значений.
# Выведите первое и последнее значения каждого из ключей.

# auto = {'BMW': ['BMW X1', 'BMW X4', 'BMW Concept XM'],
#         'Tesla': ['Tesla Model S 75D', 'Tesla Cybertruck AWD', 'Tesla Model 3 Long Range']}
# print(auto['BMW'][0],",", auto['BMW'][2])
# print(auto['Tesla'][0],",", auto['Tesla'][2])


                     # ЗАДАНИЕ 3 (10.13)
# Условие:
# Исправьте ошибки в коде, чтобы получить требуемый вывод.(Вывод True)
# d1 = {"a":100."b": 200."с": 300}
# d2 = {a: 300. b: 200, d: 400}
# print(d1["b"])==d2["b"]


# d1 = {"a": 100, "b": 200, "с": 300}
# d2 = {"a": 300, "b": 200, "d": 400}
# print(d1["b"] == d2["b"])


                     # ЗАДАНИЕ 4 (10.14)
# Условие:
# Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран.

# b = 1                             # умножение
# a = {'Числовое значение 1': 2,
#      'Числовое значение 2': 3,
#      'Числовое значение 3': 5,
#      'Числовое значение 4': 10,}
#
# for i in a:                     # В цикле i-ключ, a[i]-значения
#     b *= a[i]                   # тоже самое, что и b = b * a[i]
# print(b)                        # Результат: 2 * 3 * 5 * 10 = 300


                     # ЗАДАНИЕ 5 (10.15)
# Условие:
# Даны 2 списка одинаковой длины. Необходимо создать из них словарь таким образом, чтобы элементы первого списка были
# ключами, а элементы второго - соответственно значениями словаря.

# a = [1, 2, 3, 4, 5, 6, 7]                                                                        # 1-ый список
# b = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]          # 2-ой список
# c = dict(zip(a,b))
#
# print(c)


                     # ЗАДАНИЕ 6 (10.16)
# Условие:
# Создайте словарь из строки 'pythonist' следующим образом:
# в качестве ключей возьмите буквы строки, а значениями пусть будут числа,
# соответствующие количеству вхождений данной буквы в строку.

# a = 'pythonist'
# b = {i: a.count(i) for i in a}
# print(b)
