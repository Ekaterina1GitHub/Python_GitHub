                    # 18. ФУНКЦИИ (Часть 2)
                    # 18.1 Пример / Рекурсивные функции (на примере вычисления факториала)
# 18.1.1
# def factorial(n):
#     if n != 0:
#         return n * factorial(n - 1)     # 5 * (5 - 1) = 5 * 4 = 20
#     else:                               # 20 * (4 - 1) = 20 * 3 = 60
#         return 1                        # 60 * (3 - 1) = 60 * 2 = 120
#                                         # 120 * (2 - 1) = 120 * 1 = 120
# print(factorial(5))                     # Результат: 120

# 18.1.2
# def factorial(n):
#     if n != 0:
#         return n * factorial(n - 1)     # 7 * (7 - 1) = 7 * 6 = 42
#     else:                               # 42 * (6 - 1) = 42 * 5 = 210
#         return 1                        # 210 * (5 - 1) = 210 * 4 = 840
#                                         # 840 * (4 - 1) = 840 * 3 = 2520
#                                         # 2520 * (3 - 1) = 2520 * 2 = 5040
#                                         # 5040 * (2 - 1) = 5040 * 1 = 5040
# print(factorial(7))                     # Результат: 5040

# 18.1.3
# def factorial(n):
#     if n != 0:
#         return n * factorial(n - 1)     # 10 * (10 - 1) = 10 * 9 = 90
#     else:                               # 90 * (9 - 1) = 90 * 8 = 720
#         return 1                        # 720 * (8 - 1) = 720 * 7 = 5040
#                                         # 5040 * (7 - 1) = 5040 * 6 = 30240
#                                         # 30240 * (6 - 1) = 30240 * 5 = 151200
#                                         # 151200 * (5 - 1) = 151200 * 4 = 604800
#                                         # 604800 * (4 - 1) = 604800 * 3 = 1814400
#                                         # 1814400 * (3 - 1) = 1814400 * 2 = 3628800
#                                         # 3628800 * (2 - 1) = 3628800 * 1 = 3628800
# print(factorial(10))                    # Результат: 3628800

# 18.1.4
# def factorial(n):
#     if n != 0:
#         return n * factorial(n - 1)
#     else:
#         return 1
#
# print(factorial(0))                       # Результат: 1


                    # 18.2 Пример / Присвоение функции переменной
# 18.2.1
# def add(a, b):
#     return a + b
#
# variable = add(1, 2)
#
# print(variable)           # Результат: 3

# 18.2.2
# def cakes(a, b):
#     return a + b
#
# cake1 = cakes(10, 30)
# cake2 = cakes(7, 25)
# cake3 = cakes(2, 20)
# cake4 = cakes(0, 30)
#
# print(cake1)         # Результат: 10 + 30 = 40
# print(cake2)         # Результат: 7 + 25 = 32
# print(cake3)         # Результат: 2 + 20 = 22
# print(cake4)         # Результат: 0 + 30 = 30


                    # 18.3 Пример / Присвоение функции переменной
# def func(x): return x
#
# a1 = func                # ф-ию можно вызвать через имя func, имя a1, имя a2
# a2 = a1
#
# print(a2(10))            # Результат: 10


                    # 18.4 Пример / Присвоение функции переменной
# def sq(x): return x * x
#
# square = sq                       # расширение имени ф-ии (старые вызовы ф-ии будут работать по sq, а новые - по square)


                    # 18.5 Пример / Анонимная ф-ия: лямбда
# product = lambda x, y: x * y      # ф-ия лямбда - простая ф-ия, вып-щая лёгкую мат.операцию или вывод к-либо числа
#                                   # в ф-ии не используются слова return, print
#                                   # синтаксис ф-ии лямбда отличный от всех др. ф-ий
# print(product(2, 3))              # Результат: 2 * 3 = 6
#
# print(type(product))              # Результат: <class 'function'>


                    # 18.6 Пример / Анонимная ф-ия: лямбда
# power = lambda x=1, y=2: x ** y     # можно задавать ключевые аргументы в ф-ии lambda
# square = power                      # можно расширять название ф-ии
# print(square(5))                    # Результат: 5 ** 2 = 25
# Проверка:
# print(square())                     # Результат: 1 ** 2 = 1
# print(square(3, 4))                 # Результат: 3 ** 4 = 81
# print(square(x=5, y=3))             # Результат: 5 ** 3 = 125


                    # 18.7 Пример / Ф-ия внутри ф-ии в Python
# 18.7.1
# def mul(a):
#     def helper(b):
#         return a * b
#
#     return helper         # необходимо обязательно вызывать вложенные ф-ии на 1-ом ур-не по табуляции с влож. ф-ей
#
# print(mul(3)(2))         # Результат: 3 * 2 = 6
                         # 3 - значение в () для главной ф-ии a
                         # 2 - значение в () для второстепенной (вложенной) ф-ии b

# 18.7.2
# def mul(a, b):
#     def helper(c, d):
#         return a * b + c - d
#
#     return helper
#
# print(mul(30, 40)(80, 50))     # Результат: (30 * 40) + 80 - 50 = 1200 + 80 - 50 = 1230


                    # 18.8 Пример / Декоратор ф-ии в Python
# def simple_decore(fn):           # декоратор simple_decore, fn - параметр, агрумент которого будет ф-ей
#     def wrapper():               # вложенная ф-ия
#         print('Start function')  # обёртка на основную функцию
#         fn()                     # параметр, аргументом которого будет к-либо другая ф-ия
#         print('Stop function')   # обёртка на основную функцию
#     return wrapper               # возвращаем вложенную ф-ию
#                                  # Применение декоратора к ф-ям, которые хотим задекорировать:
# @simple_decore                   # @ - ф-ия first_test будет задекорирована декоратором simple_decore
# def first_test():
#     print('Test function 1')
#                                  # декораторов м.б. неогранич. кол-во
# @simple_decore                   # @ - ф-ия s_test будет задекорирована декоратором simple_decore
# def s_test():
#     print('sfd')
#
# first_test()                    # вызов ф-ии (ф-ия будет с декоратором)
# s_test()                        # вызов ф-ии (ф-ия будет с декоратором)


                    # ЗАДАНИЕ 1 (18.9)
# Условие:
# Написать ф-ию, которая определяет количество разрядов введённого целого числа.

# 1 способ:
# def razryadi(a):
#     s = 0                      # сумма
#     while a > 0:
#         s = s + 1              # s += 1
#         a = a // 10            # как только цифры заканчиваются и a = 0, цикл прекращает свою работу
#     print("Количество разрядов введённого целого числа: ", s)
#
# razryadi(abs(int(input("Введите целое число: "))))

# 2 способ:
# def razryadi(a):
#     s = 0                      # сумма
#     while a > 0:
#         s = s + 1              # s += 1
#         a = a // 10            # как только цифры заканчиваются и a = 0, цикл прекращает свою работу
#     return f"{'Количество разрядов введённого целого числа:'} {s}"
#
# print(razryadi(abs(int(input("Введите целое число: ")))))

# 3 способ:
# razryadi = lambda a: len(list(filter(str.isdigit, str(a))))
#
# print(razryadi(int(input("Введите целое число: "))))       # отриц. числа тоже рассм-ся

# 4 способ (из презентации):
# def digits(n):
#     i = 0                      # сумма
#     while n > 0:
#         i = i + 1              # i += 1
#         n = n // 10            # как только цифры заканчиваются и a = 0, цикл прекращает свою работу
#     return i
#
# num = abs(int(input('Введите число: ')))
# print('Количество разрядов:', digits(num))

# 5 способ:
# def razryadi(a):
#     a = str(a)
#     b = a.replace('-','')
#     c = list(b)
#     d = len(c)
#     return d
#
# print(razryadi(int(input("Введите целое число: "))))


                    # ЗАДАНИЕ 2 (18.10)
# Условие:
# В зависимости от выбора пользователя вычислить площадь круга, прямоугольника или треугольника.
# Для вычисления площади каждой фигуры должна быть написана отдельная ф-ия.
# Примечание: Площадь треугольника - по формуле Герона.

# 1 способ*:
# import math
# def area_de_un_circulo(R):            # Площадь круга: S = пR2
#     S_kr = math.pi * R ** 2           # Площадь круга равна половине произведения длины его окружности на радиус.
#     return S_kr
#
# def area_de_un_rectangulo(a, b):        # Площадь прямоугольника: S = ab (a - длина, b - ширина)
#     S_pryamoug = a * b
#     return S_pryamoug
#
# def area_de_un_triangulo(a, b, c):                        # Площадь треугольника по формуле Герона:
#     p = (a + b + c) / 2                                   # p = (a + b + c) / 2
#     S_treug = math.sqrt(p * (p - a) * (p - b) * (p - c))  # S = квадратный корень из p(p - a)(p - b)(p - c)
#     return S_treug                                        # Площадь треуг. со сторонами a, b, c равна корню квадратному из
#                                                           # полупериметра, умнож. на полупериметр минус a,  полупериметр
#                                                           # минус b, полупериметр минус c.
#                                                           # Полупериметр = половине суммы длин всех сторон треугольника.
#
#
# eleccion = str(input('Введите название геометрической фигуры, площадь которой Вы желаете найти (круг, прямоугольник, треугольник): '))
# if eleccion == 'круг':
#     print('Площадь круга:', area_de_un_circulo(int(input('Введите радиус круга: '))))
# elif eleccion == 'прямоугольник':
#     A = int(input('Введите длину прямоугольника: '))
#     B = int(input('Введите ширину прямоугольника: '))
#     print('Площадь прямоугольника:', area_de_un_rectangulo(A, B))
# elif eleccion == 'треугольник':
#     A = int(input('Введите длину стороны а треугольника: '))
#     B = int(input('Введите длину стороны b треугольника: '))
#     C = int(input('Введите длину стороны c треугольника: '))
#     print('Площадь треугольника:', area_de_un_triangulo(A, B, C))

# 2 способ (из презентации):
# import math
#
# def circle(r):
#     return math.pi * r ** 2
#
# def rectangle(a, b):
#     return a * b
#
# def triangle(a, b, c):
#     p = (a + b + c) / 2
    # return math.sqrt(p * (p - a) * (p - b) * (p - c))
    # или 2-ой вариант return(a):
#     return (p * (p - a) * (p - b) * (p - c)) ** 0.5
#
# choice = input('Круг(к), прямоугольник(п) или треугольник(т): ')
# if choice == 'к':
#     rad = float(input('Радиус: '))
#     print('Площадь круга: %.2f' % circle(rad))
# elif choice == 'п':
#     l = float(input('Длина: '))
#     w = float(input('Ширина: '))
#     print('Площадь прямоугольника: %.2f' % rectangle(l, w))
# elif choice == 'т':
#     AB = float(input('Первая сторона: '))
#     BC = float(input('Вторая сторона: '))
#     CA = float(input('Третья сторона: '))
#     print('Площадь треугольника: %.2f' % triangle(AB, BC, CA))


                    # ЗАДАНИЕ 3 (18.11)
# Условие:
# Написать ф-ию, которая заполняет массив, длинной 10 элементов, случайными числами в диапазоне,
# указанном пользователем с клавиатуры. Ф-ия должна принимать 2 аргумента - начало диапазона и его конец,
# при этом ничего не возвращать.

# 1 способ*:
# import random
# def zapolnenie_massiva(a, b):
#     for i in range(10):                                   # диапазон от 0 - до 9
#         c[i] = random.randint(a, b)
#     print('Массив с 10 случайными числами: ', c)
#
# a = int(input('Введите начало диапазона: '))
# b = int(input('Введите конец диапазона: '))
# c = [0] * 10                                             # Результат данной записи: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# zapolnenie_massiva(a, b)

# 2 способ (из презентации):
# import random
#
# N = 10
# a = [0] * N                                           # Результат данной записи: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#
# def func(mn, mx):
#     for i in range(N):
#         a[i] = random.randint(mn, mx)
#
# mn = int(input('Начало диапазона: '))
# mx = int(input('Конец диапазона: '))
# func(mn, mx)
# print(a)


                    # ЗАДАНИЕ 4 (18.12)
# Условие:
# Написать ф-ию и сделать так, чтобы число секунд отображалось в виде
# дни:часы:минуты:секунды

# 1 способ*:
# import datetime
# def time_converter(sec):
#     days_watch_minutes_seconds = str(datetime.timedelta(seconds = sec))
#     return 'Секунды в формате "дни:часы:минуты:секунды": ', days_watch_minutes_seconds
#
# print(time_converter(int(input('Введите секунды: '))))

# 2 способ (из презентации):
# def convert(seconds):
#     days = seconds // (24 * 3600)  # напр., 200.000 сек. // (24 ч. * 3600 сек в 1 часе) = 2, 31 = 2 дня   +
#     seconds %= 24 * 3600           # сек. = 200.000 сек. % 86400 сек в 1 сутках = 27200
#                                    # seconds %= 24 * 3600 или seconds = seconds % (24 * 3600)
#     hours = seconds // 3600        # часы = 27200 // (60 мин * 60 сек) = 7, 55 = 7 часов   +
#     seconds %= 3600                # сек. = 27200 % 3600 сек в 1 часе = 2000
#                                    # seconds %= 3600  или seconds = seconds % 3600
#     minutes = seconds // 60        # мин. = 2000 // 60 = 33, 33 = 33 минуты    +
#                                    # seconds %= 60  или seconds = seconds % 60
#     seconds %= 60                  # сек. = 2000 % 60 = 20 секунд   +
#     print(f'{days}:{hours}:{minutes}:{seconds}')
#
# convert(200000)
              # 1 день = 24 часа                 # 24 ч. * 3600 сек. в 1 часе = 86400 сек в 24 часах (1 дне)
              # 1 час = 60 мин.                  # 60 сек. * 60 мин. = 3600 сек. в 1 часе
              # 1 мин. = 60 сек.                  # 60 сек. - в минуте


                    # ЗАДАНИЕ 5 (18.13)
# Условие:
# Написать функцию, которая считает сколько гласных и согласных в строке.
# Строку вводить с клавиатуры.

# 1 способ*:
# def glasnie_y_soglasnie(a):
#     glasnie = 0            # сумма
#     soglasnie = 0          # сумма
#     Glasnie = ['а', 'о', 'у', 'э', 'ы', 'я', 'ё', 'ю', 'е', 'и']
#     for i in a:
#         if i.isalpha():
#             if i in Glasnie:
#                 glasnie += 1                            # glasnie = glasnie + 1
#             elif i not in Glasnie:
#                 soglasnie += 1                          # soglasnie = soglasnie + 1
#
#     print('Количество гласных в строке:', glasnie)
#     print('Количество согласных в строке:', soglasnie)
# A = str(input('Введите текст в строку: '))
# glasnie_y_soglasnie(A)

# 2 способ (из презентации):
# def func(a):
#     a1 = 0
#     a2 = 0
#     for i in a:
#         if i.isalpha():
#             if i in 'aeoiuy':
#                 a1 += 1
#             else:
#                 a2 += 1
#     print('Количество гласных:', a1)
#     print('Количество согласных:', a2)
# func(input('Вдедите строку: '))


                    # ЗАДАНИЕ 6 (18.14)
# Условие:
# Ф-ию, которая при заданном целом числе n, посчитает n + nn + nnn.

# 1 способ*:
# def summa_n(n):
#     n = str(n)         # изм. типа данных int на str                   # Например, n = 4
#     nn = n * 2         # тип перем. nn: <class 'str'>                  # nn = 44
#     nnn = n * 3        # тип перем. nnn: <class 'str'>                 # nnn = 444
#     return int(n) + int(nn) + int(nnn)                                 # 4 + 44 + 444 = 492
#
# print('n + nn + nnn: ', summa_n(int(input('Введите целое число n: '))))

# 2 способ (из презентации):
# def solve(n):
#     n1 = n
#     n2 = int(str(n) * 2)
#     n3 = int(str(n) * 3)
#     print('n + nn + nnn: ', n1 + n2 + n3)
#
# solve(4)

