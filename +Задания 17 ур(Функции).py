                    # 17. ФУНКЦИИ
                    # 17.1 Пример / Функция
# def a_function():                                # имя ф-ии подбираем логически (в зависим-ти от того, что лежит внутри)
#     print('You just created a function!')
#
# a_function()                           # вызов ф-ии (в рез-те чего то, что указали внутри ф-ии, отобразится в консоле)
#                                        # без a_function() - пустой консоль


                    # 17.2 Пример / Функция
# def a_function():
#     print('You just created a function!')
#
# a_function()       # a_function() написали 3 раза - строка 'You just created a function! отобразилась в консоле 3 раза.
# a_function()
# a_function()


                    # 17.3 Пример / Пустая ф-ия (stub)
# def empty_function():
#     pass                                             # без pass - выдаст ошибку


                    # ЗАДАНИЕ 1 (17.4)
# Условие:
# Создайте ф-ию, которая будет считать сумму чисел в массиве.

# 1 cпособ*:
# def mass():
#     s = 0                               # сумма
#     arr = [1, 2, 3, 4, 5, 6, 7]         # Результат: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
#     for i in arr:
#         s += i                          # s = s + i
#     print('Сумма чисел в массиве: ', s)
#
# mass()

# 2 cпособ:
# def mass():
#     arr = [1, 2, 3, 4, 5, 6, 7]         # Результат: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
#     print('Сумма чисел в массиве: ', sum(arr))
#
# mass()

# 3 cпособ:
# def mass():
#     x = [i for i in range(10)]                 # Результат: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] - 45
#     print('Сумма чисел в массиве: ', sum(x))
#
# mass()


                    # 17.5 Пример / Передача аргументов функции
# 17.5.1
# def add(a, b):                           # a, b - аргументы (указываются в круглых скобках)
#     return a + b
#                                          # Рез-тат - кортеж
# print(add(1,2))                          # Результат: 3 (1 + 2)
# print(add(100, 900))                     # Результат: 1000 (100 + 900)

# 17.5.2
# def add(a, b):                           # a, b - аргументы (указываются в круглых скобках)
#     return a + b
#
# (add(1,2))                               # Результат: ничего не отобразится в консоле

# 17.5.3
# def add(a, b):                           # a, b - аргументы (указываются в круглых скобках)
#     print(a + b)                         # Результат: None
#
# print(add(1,2))                          # Результат: 3 (1 + 2)

# 17.5.4
# def add(a, b):                             # a, b - аргументы (указываются в круглых скобках)
#     return (a + b) * 2, (a * b) + 25, (a - b) / 2,  (a / b) - 11
#                                         # (500 + 100) * 2 = 1200
#                                         # (500 * 100) + 25 = 50025
#                                         # (500 - 100) / 2 = 200
#                                         # (500 / 100) - 11 = -6
# print(add(500, 100))


                    # 17.6 Пример / Передача аргументов функции
# def add(a, b):
#     return a + b
#
# print(add(a = 2, b = 3))                      #  Результат: 5 (2 + 3)
#
# total = add(b = 4, a = 5)                     # в переменной total занесли вызов ф-ии
# print(total)                                  # Результат: 9 (5 + 4)  / автоматический вызов ф-ии


                    # 17.7 Пример / Ключевые аргументы
# def add(a, b):              # Параметры (a, b) - переменные, которые задаются при создании ф-ии
#     return a + b            # Аргументы (1, 2) - реальные значения переменных, которые задаются при вызове ф-ии.
#
# print(add(1, 2))       # Результат: 3 (1 + 2)


                    # 17.8 Пример / Ключевые аргументы
# 17.8.1
# def keyword_function(a = 1, b = 2):                 # Ключевые аргументы- переменные, значение которых задаются сразу,
#     return a + b                                    # при создании ф-ии (a = 1, b = 2)
#
# print(keyword_function(b = 4, a = 5))               # Результат: 9 (5 + 4)
# print(keyword_function())                           # Результат: 3 (1 + 2)

# 17.8.2
# def keyword_function(a = 3, b = 4):                 # Ключевые аргументы- переменные, значение которых задаются сразу,
#     return (a + b) * b                              # при создании ф-ии (a = 1, b = 2)
#
# print(keyword_function(b = 5, a = 5))               # Результат: 50      (5 + 5) * 5
# print(keyword_function())                           # Результат: 28      (3 + 4) * 4


                    # 17.9 Пример / Ключевые аргументы
# 17.9.1
# def mixed_function(a, b = 2, c = 3):                  # a - обычный аргумент; b, c - ключевые аргументы
#     return a + b + c
#
# print(mixed_function(1, b = 4, c = 5))               # Результат: 10 (1 + 4 + 5)
#
# print(mixed_function(1))                             # Результат: 6 (1 + 2 + 3)

# 17.9.2 (Решение при незаданном аргументе a)
# def mixed_function(a, b = 2, c = 3):                  # a - обычный аргумент; b, c - ключевые аргументы
#     return a + b + c
#
# mixed_function(b = 4, c = 5)         # Рез-тат: TypeError: mixed_function() missing 1 required positional argument: 'a'
#
# print(mixed_function(1, b = 4, c = 5))                # можно указать a = 1
#
# print(mixed_function(1))          # обычные аргументы д.б. в обязательном порядке заданы при вызове ф-ии


                    # 17.10 Пример / *args и **kwargs
# def many(*args, **kwargs):
#     print(args)           # Результат: (1, 2, 3) - кортеж
#     print(kwargs)         # Результат: {'name': 'Mike', 'job': 'programmer'} - словарь
#
# many(1, 2, 3, name = 'Mike', job = 'programmer')


                    # 17.11 Пример / Область видимость и глобальные переменные
# 17.11.1
# def function_a():                    # Инф-я, содержащаяся внутри ф-ии a, видна внутри данной ф-ии.
#     a = 1
#     b = 2
#     return a + b
#
# def function_b():
#     c = 3
#     return a + c                     # Переменная a определена внутри ф-ии a, поэтому результат - ошибка
#
# print(function_a())
# print(function_b())                  # Результат: NameError: name 'a' is not defined

# 17.11.2
# def function_a():                    # Инф-я, содержащаяся внутри ф-ии a, видна внутри данной ф-ии.
#     global a
#     a = 1
#     b = 2
#     return a + b
#
# def function_b():
#     c = 3
#     return a + c                     # Переменная a - глабальная, поэтому видна во всех ф-ях
#
# print(function_a())         # Результат: 3 (1 + 2)
# print(function_b())         # Результат: 4 (1 + 3)


                    # 17.12 Пример / Вложенные ф-ии
# def f1(a, b):
#     def f2(c):
#         return c * c * c     # 4 * 4 * 4 = 64
#                              # 5 * 5 * 5 = 125
#     return f2(a) + f2(b)     # 64 + 125 = 189 - Результат
#
# print(f1(4, 5))


                    # 17.13 Пример / Однострочные код
# def sum(a, b): return a + b                         # Однострочная запись - для простых выражений
#
# print(sum(1, 5))      # Результат : 6 (1 + 5)


                    # ЗАДАНИЕ 2 (17.14)
# Условие:
# Написать ф-ию is_year_leap, принимающую 1 аргумент - год, и возвращающую True, если год високосный, и False иначе.

# 1 способ:
# def is_year_leap(a):
#     if a % 4 == 0 and a % 100 != 0:
#         print("True")
#     elif a % 400 == 0:
#         print("True")
#     else:
#         print("False")
#
# is_year_leap(int(input('Введите год: ')))

# 2 способ:
# def is_year_leap(a):
#     if a % 4 == 0 and a % 100 != 0 or a % 400 == 0:
#         return True
#     else:
#         return False
#
# print(is_year_leap(int(input('Введите год: '))))

# 3 способ:
# def is_year_leap(year):
#     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0
#
# print(is_year_leap(int(input('Введите год: '))))


                    # ЗАДАНИЕ 3 (17.15)
# Условие:
# Написать ф-ию square, принимающую 1 аргумент - сторону квадрата, и возвращающую 3 значения (с помощью кортежа):
# периметр квадрата, площадь квадрата и диагональ квадрата. Сторону квадрата вводить с клавиатуры.

# import math
# def square(lado_de_un_cuadrado):                  # Все стороны квадрата - равны
#     Pe = lado_de_un_cuadrado * 4                  # Периметр квадрата - сумма длин всех сторон квадрата
#     Pl = lado_de_un_cuadrado ** 2                  # Площадь квадрата - пространство, ограниченное сторонами квадрата,
#                                                   # т.е. в пределах периметра квадрата.
#     Di = lado_de_un_cuadrado * math.sqrt(2)       # Диагональ квадрата - любой отрезок, соединяющий 2 вершины противоположных
#     return Pe, Pl, Di                             # углов квадрата.
# print(square(int(input('Введите сторону квадрата: '))))


                    # ЗАДАНИЕ 4 (17.16)
# Условие:
# Написать ф-ию season, принимающую 1 аргумент - номер месяца (от 1 до 12), и возвращающую время года,
# которому этот месяц принадлежит (зима, весна, лето или осень). Номер месяца вводить с клавиатуры.

# 1 способ:
# def season(Mes):
#             if Mes == 12 or 1 <= Mes < 3:
#                 return 'Зима'                            # 12, 1, 2 - Зима
#             elif 3 <= Mes < 6:
#                 return 'Весна'                           # 3, 4, 5 - Весна
#             elif 6 <= Mes < 9:
#                 return 'Лето'                            # 6, 7, 8 - Лето
#             elif 9 <= Mes < 12:
#                 return 'Осень'                           # 9, 10, 11 - Осень
#             else:
#                 return 'Номер месяца, который Вы ввели, больше 12 либо меньше 1'
#
# print(season(int(input('Введите номер месяца (от 1 до 12): '))))

# 2 способ:
# def season(Mes):
#             if Mes == 12 or 1 <= Mes < 3:
#                 print('Зима')                            # 12, 1, 2 - Зима
#             elif 3 <= Mes < 6:
#                 print('Весна')                           # 3, 4, 5 - Весна
#             elif 6 <= Mes < 9:
#                 print('Лето')                            # 6, 7, 8 - Лето
#             elif 9 <= Mes < 12:
#                 print('Осень')                           # 9, 10, 11 - Осень
#             else:
#                 print('Номер месяца, который Вы ввели, больше 12 либо меньше 1')
#
# season(int(input('Введите номер месяца (от 1 до 12): ')))


                    # ЗАДАНИЕ 6 (17.17)
# Условие:
# Ф-ия, вычисляющая среднее арифметическое элементов массива. Массив должен состоять из случайных чисел,
# длинной из 10 элементов.

# 1 способ*:
# import random
# def srednee_arifmiticheskoe():
#     arr = [random.randint(0, 999) for i in range(10)]  # массив с 10-ю случайными числами
#     a = sum(arr) / len(arr)                            # ср. арифметическое элементов массива
#     return 'Массив с 10-ю случайными числами:', arr, 'Cреднее арифметическое элементов массива:', a
#
# print(srednee_arifmiticheskoe())

# 2 способ*:
# import random
# import statistics
# def srednee_arifmiticheskoe():
#     arr = [random.randint(0, 999) for i in range(10)]  # массив с 10-ю случайными числами
#     a = statistics.mean(arr)                           # ср. арифметическое элементов массива
#     print('Массив с 10-ю случайными числами: ', arr)
#     print('Cреднее арифметическое элементов массива:', a)

# srednee_arifmiticheskoe()

# 3 способ:
# import random
#
# def srednee_arifmeticheskoe():
#     arr = [random.randint(1, 100) for i in range(10)]
#     s = 0                                               # сумма
#     for i in arr:
#         s += i                                          # s = s + i
#     return 'Массив с 10-ю случайными числами:', arr, 'Cреднее арифметическое элементов массива:', s / len(arr)
#
# print(srednee_arifmeticheskoe())                       # вызов ф-ии
